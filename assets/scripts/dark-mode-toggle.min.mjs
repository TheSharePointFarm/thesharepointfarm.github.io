const doc=document,store=localStorage,PREFERS_COLOR_SCHEME="prefers-color-scheme",MEDIA="media",LIGHT="light",DARK="dark",MQ_DARK=`(${PREFERS_COLOR_SCHEME}:${DARK})`,MQ_LIGHT=`(${PREFERS_COLOR_SCHEME}:${LIGHT})`,LINK_REL_STYLESHEET="link[rel=stylesheet]",REMEMBER="remember",LEGEND="legend",TOGGLE="toggle",SWITCH="switch",APPEARANCE="appearance",PERMANENT="permanent",MODE="mode",COLOR_SCHEME_CHANGE="colorschemechange",PERMANENT_COLOR_SCHEME="permanentcolorscheme",ALL="all",NOT_ALL="not all",NAME="dark-mode-toggle",DEFAULT_URL="https://googlechromelabs.github.io/dark-mode-toggle/demo/",installStringReflection=(e,t,i=t)=>{Object.defineProperty(e,i,{enumerable:!0,get(){const e=this.getAttribute(t);return null===e?"":e},set(e){this.setAttribute(t,e)}})},installBoolReflection=(e,t,i=t)=>{Object.defineProperty(e,i,{enumerable:!0,get(){return this.hasAttribute(t)},set(e){e?this.setAttribute(t,""):this.removeAttribute(t)}})},template=doc.createElement("template");template.innerHTML=`<style>*,::after,::before{box-sizing:border-box}:host{contain:content;display:block}:host([hidden]){display:none}form{background-color:var(--${NAME}-background-color,transparent);color:var(--${NAME}-color,inherit);padding:0}fieldset{border:none;margin:0;padding-block:.25rem;padding-inline:.25rem}legend{font:var(--${NAME}-legend-font,inherit);padding:0}input,label{cursor:pointer}label{white-space:nowrap}input{opacity:0;position:absolute;pointer-events:none}input:focus-visible+label{outline:#e59700 auto 2px;outline:-webkit-focus-ring-color auto 5px}label:not(:empty)::before{margin-inline-end:.5rem;}label::before{content:"";display:inline-block;background-size:var(--${NAME}-icon-size,1rem);background-repeat:no-repeat;height:var(--${NAME}-icon-size,1rem);width:var(--${NAME}-icon-size,1rem);vertical-align:middle;}[part=lightLabel]::before{background-image:var(--${NAME}-light-icon, url("${DEFAULT_URL}sun.png"))}[part=darkLabel]::before{filter:var(--${NAME}-icon-filter, none);background-image:var(--${NAME}-dark-icon, url("${DEFAULT_URL}moon.png"))}[part=toggleLabel]::before{background-image:var(--${NAME}-checkbox-icon,none)}[part=permanentLabel]::before{background-image:var(--${NAME}-remember-icon-unchecked, url("${DEFAULT_URL}unchecked.svg"))}[part=darkLabel],[part=lightLabel],[part=toggleLabel]{font:var(--${NAME}-label-font,inherit)}[part=darkLabel]:empty,[part=lightLabel]:empty,[part=toggleLabel]:empty{font-size:0;padding:0}[part=permanentLabel]{font:var(--${NAME}-remember-font,inherit)}input:checked+[part=permanentLabel]::before{background-image:var(--${NAME}-remember-icon-checked, url("${DEFAULT_URL}checked.svg"))}input:checked+[part=darkLabel],input:checked+[part=lightLabel]{background-color:var(--${NAME}-active-mode-background-color,transparent)}input:checked+[part=darkLabel]::before,input:checked+[part=lightLabel]::before{background-color:var(--${NAME}-active-mode-background-color,transparent)}input:checked+[part=toggleLabel]::before{filter:var(--${NAME}-icon-filter, none)}input:checked+[part=toggleLabel]+aside [part=permanentLabel]::before{filter:var(--${NAME}-remember-filter, invert(100%))}aside{visibility:hidden;margin-block-start:.15rem}[part=darkLabel]:focus-visible~aside,[part=lightLabel]:focus-visible~aside,[part=toggleLabel]:focus-visible~aside{visibility:visible;transition:visibility 0s}aside [part=permanentLabel]:empty{display:none}@media (hover:hover){aside{transition:visibility 3s}aside:hover{visibility:visible}[part=darkLabel]:hover~aside,[part=lightLabel]:hover~aside,[part=toggleLabel]:hover~aside{visibility:visible;transition:visibility 0s}}</style><form part=form><fieldset part=fieldset><legend part=legend></legend><input part=lightRadio id=l name=mode type=radio><label part=lightLabel for=l></label><input part=darkRadio id=d name=mode type=radio><label part=darkLabel for=d></label><input part=toggleCheckbox id=t type=checkbox><label part=toggleLabel for=t></label><aside part=aside><input part=permanentCheckbox id=p type=checkbox><label part=permanentLabel for=p></label></aside></fieldset></form>`;export class DarkModeToggle extends HTMLElement{static get observedAttributes(){return[MODE,APPEARANCE,PERMANENT,LEGEND,LIGHT,DARK,REMEMBER]}constructor(){super(),installStringReflection(this,MODE),installStringReflection(this,APPEARANCE),installStringReflection(this,LEGEND),installStringReflection(this,LIGHT),installStringReflection(this,DARK),installStringReflection(this,REMEMBER),installBoolReflection(this,PERMANENT),this._darkCSS=null,this._lightCSS=null,doc.addEventListener(COLOR_SCHEME_CHANGE,e=>{this.mode=e.detail.colorScheme,this._updateRadios(),this._updateCheckbox()}),doc.addEventListener(PERMANENT_COLOR_SCHEME,e=>{this.permanent=e.detail.permanent,this._permanentCheckbox.checked=this.permanent}),this._initializeDOM()}_initializeDOM(){const e=this.attachShadow({mode:"open"});e.appendChild(template.content.cloneNode(!0)),this._darkCSS=doc.querySelectorAll(`${LINK_REL_STYLESHEET}[${MEDIA}*=${PREFERS_COLOR_SCHEME}][${MEDIA}*="${DARK}"]`),this._lightCSS=doc.querySelectorAll(`${LINK_REL_STYLESHEET}[${MEDIA}*=${PREFERS_COLOR_SCHEME}][${MEDIA}*="${LIGHT}"]`),this._lightRadio=e.querySelector("[part=lightRadio]"),this._lightLabel=e.querySelector("[part=lightLabel]"),this._darkRadio=e.querySelector("[part=darkRadio]"),this._darkLabel=e.querySelector("[part=darkLabel]"),this._darkCheckbox=e.querySelector("[part=toggleCheckbox]"),this._checkboxLabel=e.querySelector("[part=toggleLabel]"),this._legendLabel=e.querySelector("legend"),this._permanentAside=e.querySelector("aside"),this._permanentCheckbox=e.querySelector("[part=permanentCheckbox]"),this._permanentLabel=e.querySelector("[part=permanentLabel]");const t=matchMedia(MQ_DARK).media!==NOT_ALL;t&&matchMedia(MQ_DARK).addListener(({matches:e})=>{this.mode=e?DARK:LIGHT,this._dispatchEvent(COLOR_SCHEME_CHANGE,{colorScheme:this.mode})});const i=store.getItem(NAME);i&&[DARK,LIGHT].includes(i)?(this.mode=i,this._permanentCheckbox.checked=!0,this.permanent=!0):t&&(this.mode=matchMedia(MQ_LIGHT).matches?LIGHT:DARK),this.mode||(this.mode=LIGHT),this.permanent&&!i&&store.setItem(NAME,this.mode),this.appearance||(this.appearance=TOGGLE),this._updateAppearance(),this._updateRadios(),this._updateCheckbox(),[this._lightRadio,this._darkRadio].forEach(e=>{e.addEventListener("change",()=>{this.mode=this._lightRadio.checked?LIGHT:DARK,this._updateCheckbox(),this._dispatchEvent(COLOR_SCHEME_CHANGE,{colorScheme:this.mode})})}),this._darkCheckbox.addEventListener("change",()=>{this.mode=this._darkCheckbox.checked?DARK:LIGHT,this._updateRadios(),this._dispatchEvent(COLOR_SCHEME_CHANGE,{colorScheme:this.mode})}),this._permanentCheckbox.addEventListener("change",()=>{this.permanent=this._permanentCheckbox.checked,this._dispatchEvent(PERMANENT_COLOR_SCHEME,{permanent:this.permanent})}),this._updateMode(),this._dispatchEvent(COLOR_SCHEME_CHANGE,{colorScheme:this.mode}),this._dispatchEvent(PERMANENT_COLOR_SCHEME,{permanent:this.permanent})}attributeChangedCallback(e,t,i){if(e===MODE){if(![LIGHT,DARK].includes(i))throw new RangeError(`Allowed values: "${LIGHT}" and "${DARK}".`);matchMedia("(hover:none)").matches&&this.remember&&this._showPermanentAside(),this.permanent&&store.setItem(NAME,this.mode),this._updateRadios(),this._updateCheckbox(),this._updateMode()}else if(e===APPEARANCE){if(![TOGGLE,SWITCH].includes(i))throw new RangeError(`Allowed values: "${TOGGLE}" and "${SWITCH}".`);this._updateAppearance()}else e===PERMANENT?(this.permanent?store.setItem(NAME,this.mode):store.removeItem(NAME),this._permanentCheckbox.checked=this.permanent):e===LEGEND?this._legendLabel.textContent=i:e===REMEMBER?this._permanentLabel.textContent=i:e===LIGHT?(this._lightLabel.textContent=i,this.mode===LIGHT&&(this._checkboxLabel.textContent=i)):e===DARK&&(this._darkLabel.textContent=i,this.mode===DARK&&(this._checkboxLabel.textContent=i))}_dispatchEvent(e,t){this.dispatchEvent(new CustomEvent(e,{bubbles:!0,composed:!0,detail:t}))}_updateAppearance(){const e=this.appearance===TOGGLE;this._lightRadio.hidden=e,this._lightLabel.hidden=e,this._darkRadio.hidden=e,this._darkLabel.hidden=e,this._darkCheckbox.hidden=!e,this._checkboxLabel.hidden=!e}_updateRadios(){this.mode===LIGHT?this._lightRadio.checked=!0:this._darkRadio.checked=!0}_updateCheckbox(){this.mode===LIGHT?(this._checkboxLabel.style.setProperty(`--${NAME}-checkbox-icon`,`var(--${NAME}-light-icon,url("${DEFAULT_URL}moon.png"))`),this._checkboxLabel.textContent=this.light,this._darkCheckbox.checked=!1):(this._checkboxLabel.style.setProperty(`--${NAME}-checkbox-icon`,`var(--${NAME}-dark-icon,url("${DEFAULT_URL}sun.png"))`),this._checkboxLabel.textContent=this.dark,this._darkCheckbox.checked=!0)}_updateMode(){this.mode===LIGHT?(this._lightCSS.forEach(e=>{e.media=ALL,e.disabled=!1}),this._darkCSS.forEach(e=>{e.media=NOT_ALL,e.disabled=!0})):(this._darkCSS.forEach(e=>{e.media=ALL,e.disabled=!1}),this._lightCSS.forEach(e=>{e.media=NOT_ALL,e.disabled=!0}))}_showPermanentAside(){this._permanentAside.style.visibility="visible",setTimeout(()=>{this._permanentAside.style.visibility="hidden"},3e3)}}customElements.define(NAME,DarkModeToggle);